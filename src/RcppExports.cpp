// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// wavelet_filter
NumericVector wavelet_filter(String filter);
RcppExport SEXP _fastWavelets_wavelet_filter(SEXP filterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< String >::type filter(filterSEXP);
    rcpp_result_gen = Rcpp::wrap(wavelet_filter(filter));
    return rcpp_result_gen;
END_RCPP
}
// scaling_filter
NumericVector scaling_filter(String filter);
RcppExport SEXP _fastWavelets_scaling_filter(SEXP filterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< String >::type filter(filterSEXP);
    rcpp_result_gen = Rcpp::wrap(scaling_filter(filter));
    return rcpp_result_gen;
END_RCPP
}
// modwt
NumericMatrix modwt(NumericVector X, String filter, int J);
RcppExport SEXP _fastWavelets_modwt(SEXP XSEXP, SEXP filterSEXP, SEXP JSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type X(XSEXP);
    Rcpp::traits::input_parameter< String >::type filter(filterSEXP);
    Rcpp::traits::input_parameter< int >::type J(JSEXP);
    rcpp_result_gen = Rcpp::wrap(modwt(X, filter, J));
    return rcpp_result_gen;
END_RCPP
}
// scaling_coefs
NumericMatrix scaling_coefs(NumericVector X, String filter, int j);
RcppExport SEXP _fastWavelets_scaling_coefs(SEXP XSEXP, SEXP filterSEXP, SEXP jSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type X(XSEXP);
    Rcpp::traits::input_parameter< String >::type filter(filterSEXP);
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    rcpp_result_gen = Rcpp::wrap(scaling_coefs(X, filter, j));
    return rcpp_result_gen;
END_RCPP
}
// wavelet_coefs
NumericMatrix wavelet_coefs(NumericVector X, String filter, int j);
RcppExport SEXP _fastWavelets_wavelet_coefs(SEXP XSEXP, SEXP filterSEXP, SEXP jSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type X(XSEXP);
    Rcpp::traits::input_parameter< String >::type filter(filterSEXP);
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    rcpp_result_gen = Rcpp::wrap(wavelet_coefs(X, filter, j));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_fastWavelets_wavelet_filter", (DL_FUNC) &_fastWavelets_wavelet_filter, 1},
    {"_fastWavelets_scaling_filter", (DL_FUNC) &_fastWavelets_scaling_filter, 1},
    {"_fastWavelets_modwt", (DL_FUNC) &_fastWavelets_modwt, 3},
    {"_fastWavelets_scaling_coefs", (DL_FUNC) &_fastWavelets_scaling_coefs, 3},
    {"_fastWavelets_wavelet_coefs", (DL_FUNC) &_fastWavelets_wavelet_coefs, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_fastWavelets(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
